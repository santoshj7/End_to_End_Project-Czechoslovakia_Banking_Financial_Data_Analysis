
/* S3 STORAGE INTEGRATION */

CREATE OR REPLACE STORAGE INTEGRATION S3_CZECH_BANK_INT
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::211125340148:role/czechbankdatarole'
STORAGE_ALLOWED_LOCATIONS = ('s3://czechbankingdata/');

DESC INTEGRATION S3_CZECH_BANK_INT;

-- Now, update the Trust Relationship Policy in the AWS IAM role section with the STORAGE_AWS_IAM_USER_ARN that was created automatically for our Snowflake account in the above step.

-- Creating File Format which will be required during Stage creation.

CREATE OR REPLACE FILE FORMAT BANK_CSV_FF 
TYPE = 'csv' 
COMPRESSION = 'none' 
FIELD_DELIMITER = ','
FIELD_OPTIONALLY_ENCLOSED_BY = 'none'
SKIP_HEADER = 1 ; 

-- Creating an external (i.e.S3) stage that references the storage integration we created above.

CREATE OR REPLACE STAGE CZECH_BANK_STAGE
URL ='s3://czechbankingdata'
FILE_FORMAT = BANK_CSV_FF
STORAGE_INTEGRATION = S3_CZECH_BANK_INT;

SHOW STAGES;

LIST @CZECH_BANK_STAGE;

-- Creating multiple SNOWPIPES that recognize CSV data ingested from an external stage and copy that data into respective tables in Snowflake.
-- The AUTO_INGEST=true parameter specifies to read event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.DISTRICT -- Snowflake database-Snowflake schema-Snowflake table
FROM '@CZECH_BANK_STAGE/DISTRICT/' -- S3 bucket subfolder name
FILE_FORMAT = BANK_CSV_FF;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.ACCOUNT 
FROM '@CZECH_BANK_STAGE/ACCOUNT/' 
FILE_FORMAT = BANK_CSV_FF;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.CLIENT
FROM '@CZECH_BANK_STAGE/CLIENT/' 
FILE_FORMAT = BANK_CSV_FF;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISPOSITION 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.DISPOSITION
FROM '@CZECH_BANK_STAGE/DISP/' 
FILE_FORMAT = BANK_CSV_FF;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.CARD
FROM '@CZECH_BANK_STAGE/CARD/' 
FILE_FORMAT = BANK_CSV_FF;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.LOAN
FROM '@CZECH_BANK_STAGE/LOAN/' 
FILE_FORMAT = BANK_CSV_FF;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.ORDER_LIST
FROM '@CZECH_BANK_STAGE/ORDER/' 
FILE_FORMAT = BANK_CSV_FF;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANSACTIONS 
AUTO_INGEST = TRUE AS
COPY INTO CZECH_BANK.PUBLIC.TRANSACTIONS
FROM '@CZECH_BANK_STAGE/TRNX/' 
FILE_FORMAT = BANK_CSV_FF;

SHOW PIPES;

-- Create an Event Notification in S3 bucket using 'Notification Channel arn' which is available in the above Snowpipes, to read event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.

-- Using the code below, we can check if any new data is updated in our S3 bucket.

ALTER PIPE BANK_SNOWPIPE_DISTRICT REFRESH;
ALTER PIPE BANK_SNOWPIPE_ACCOUNT REFRESH;
ALTER PIPE BANK_SNOWPIPE_CLIENT REFRESH;
ALTER PIPE BANK_SNOWPIPE_DISPOSITION REFRESH;
ALTER PIPE BANK_SNOWPIPE_CARD REFRESH;
ALTER PIPE BANK_SNOWPIPE_LOAN REFRESH;
ALTER PIPE BANK_SNOWPIPE_ORDER REFRESH;
ALTER PIPE BANK_SNOWPIPE_TRANSACTIONS REFRESH;

SELECT COUNT(*) FROM DISTRICT;
SELECT COUNT(*) FROM ACCOUNT;
SELECT COUNT(*) FROM CLIENT;
SELECT COUNT(*) FROM DISPOSITION;
SELECT COUNT(*) FROM CARD;
SELECT COUNT(*) FROM LOAN;
SELECT COUNT(*) FROM ORDER_LIST;
SELECT COUNT(*) FROM TRANSACTIONS;

SELECT * FROM DISTRICT;
SELECT * FROM ACCOUNT;
SELECT * FROM CLIENT;
SELECT * FROM DISPOSITION;
SELECT * FROM CARD;
SELECT * FROM LOAN;
SELECT * FROM ORDER_LIST;
SELECT * FROM TRANSACTIONS;

